# Alternative Dockerfile with better caching and error handling
# Build stage
FROM node:18-alpine AS dependencies

WORKDIR /app

# Install system dependencies that might be needed
RUN apk add --no-cache \
    git \
    python3 \
    make \
    g++

# Copy package files first for better Docker layer caching
COPY package*.json ./

# Configure npm for reliability and install dependencies
RUN npm config set fetch-timeout 300000 && \
    npm config set fetch-retry-mintimeout 60000 && \
    npm config set fetch-retry-maxtimeout 300000 && \
    npm config set fetch-retries 10 && \
    npm config set registry https://registry.npmjs.org/ && \
    npm cache clean --force

# Try npm ci first, fallback to npm install if it fails
RUN npm ci --verbose || npm install --verbose

# Build stage
FROM node:18-alpine AS build

WORKDIR /app

# Copy dependencies from previous stage
COPY --from=dependencies /app/node_modules ./node_modules
COPY --from=dependencies /app/package*.json ./

# Copy configuration files
COPY tailwind.config.js ./
COPY tsconfig.json ./

# Copy source code
COPY public/ ./public/
COPY src/ ./src/

# Set environment variables for build
ARG REACT_APP_API_GATEWAY_URL
ARG REACT_APP_WS_URL
ENV REACT_APP_API_GATEWAY_URL=$REACT_APP_API_GATEWAY_URL
ENV REACT_APP_WS_URL=$REACT_APP_WS_URL

# Build the application
RUN npm run build

# Production stage
FROM nginx:1.25-alpine AS production

# Copy built application
COPY --from=build /app/build /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 3000

CMD ["nginx", "-g", "daemon off;"]
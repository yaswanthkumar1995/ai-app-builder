{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { config } from '../config';\nexport const useAuthStore = create()(persist((set, get) => ({\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  isLoading: false,\n  login: async (email, password) => {\n    set({\n      isLoading: true\n    });\n    try {\n      const response = await fetch(`${config.apiGatewayUrl}/api/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        if (response.status === 403 && errorData.requiresVerification) {\n          set({\n            isLoading: false\n          });\n          const error = new Error(errorData.error || 'Email verification required');\n          error.requiresVerification = true;\n          throw error;\n        }\n        throw new Error(errorData.error || 'Login failed');\n      }\n      const data = await response.json();\n      set({\n        user: data.user,\n        token: data.token,\n        isAuthenticated: true,\n        isLoading: false\n      });\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  register: async (email, password, name) => {\n    set({\n      isLoading: true\n    });\n    try {\n      const response = await fetch(`${config.apiGatewayUrl}/api/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password,\n          name\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || 'Registration failed');\n      }\n      const data = await response.json();\n      set({\n        user: data.user,\n        token: data.token,\n        isAuthenticated: true,\n        isLoading: false\n      });\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  logout: () => {\n    set({\n      user: null,\n      token: null,\n      isAuthenticated: false\n    });\n  },\n  refreshToken: async () => {\n    const {\n      token\n    } = get();\n    if (!token) return;\n    try {\n      const response = await fetch(`${config.apiGatewayUrl}/api/auth/refresh`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        set({\n          token: data.token\n        });\n      }\n    } catch (error) {\n      // Token refresh failed, logout user\n      get().logout();\n    }\n  }\n}), {\n  name: 'auth-storage',\n  partialize: state => ({\n    user: state.user,\n    token: state.token,\n    isAuthenticated: state.isAuthenticated\n  })\n}));","map":{"version":3,"names":["create","persist","config","useAuthStore","set","get","user","token","isAuthenticated","isLoading","login","email","password","response","fetch","apiGatewayUrl","method","headers","body","JSON","stringify","ok","errorData","json","catch","status","requiresVerification","error","Error","data","register","name","logout","refreshToken","partialize","state"],"sources":["/Users/yaswanthkumary/Documents/AI-ML/Build apps/ai-code-platform/services/frontend/src/stores/authStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { config } from '../config';\n\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n  avatar?: string;\n}\n\ninterface AuthState {\n  user: User | null;\n  token: string | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string, name: string) => Promise<void>;\n  logout: () => void;\n  refreshToken: () => Promise<void>;\n}\n\nexport const useAuthStore = create<AuthState>()(\n  persist(\n    (set, get) => ({\n      user: null,\n      token: null,\n      isAuthenticated: false,\n      isLoading: false,\n\n      login: async (email: string, password: string) => {\n        set({ isLoading: true });\n        try {\n          const response = await fetch(`${config.apiGatewayUrl}/api/auth/login`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ email, password }),\n          });\n\n          if (!response.ok) {\n            const errorData = await response.json().catch(() => ({}));\n            if (response.status === 403 && errorData.requiresVerification) {\n              set({ isLoading: false });\n              const error = new Error(errorData.error || 'Email verification required');\n              (error as any).requiresVerification = true;\n              throw error;\n            }\n            throw new Error(errorData.error || 'Login failed');\n          }\n\n          const data = await response.json();\n          set({\n            user: data.user,\n            token: data.token,\n            isAuthenticated: true,\n            isLoading: false,\n          });\n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      register: async (email: string, password: string, name: string) => {\n        set({ isLoading: true });\n        try {\n          const response = await fetch(`${config.apiGatewayUrl}/api/auth/register`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ email, password, name }),\n          });\n\n          if (!response.ok) {\n            const errorData = await response.json().catch(() => ({}));\n            throw new Error(errorData.error || 'Registration failed');\n          }\n\n          const data = await response.json();\n          set({\n            user: data.user,\n            token: data.token,\n            isAuthenticated: true,\n            isLoading: false,\n          });\n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      logout: () => {\n        set({\n          user: null,\n          token: null,\n          isAuthenticated: false,\n        });\n      },\n\n      refreshToken: async () => {\n        const { token } = get();\n        if (!token) return;\n\n        try {\n          const response = await fetch(`${config.apiGatewayUrl}/api/auth/refresh`, {\n            method: 'POST',\n            headers: {\n              'Authorization': `Bearer ${token}`,\n            },\n          });\n\n          if (response.ok) {\n            const data = await response.json();\n            set({ token: data.token });\n          }\n        } catch (error) {\n          // Token refresh failed, logout user\n          get().logout();\n        }\n      },\n    }),\n    {\n      name: 'auth-storage',\n      partialize: (state) => ({\n        user: state.user,\n        token: state.token,\n        isAuthenticated: state.isAuthenticated,\n      }),\n    }\n  )\n);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { create } from 'zustand';\nconst defaultProject = {\n  id: 'default',\n  name: 'My AI Project',\n  description: 'A project built with AI assistance',\n  files: [{\n    id: '1',\n    name: 'src',\n    type: 'folder',\n    path: '/src',\n    children: [{\n      id: '2',\n      name: 'App.js',\n      type: 'file',\n      path: '/src/App.js',\n      content: `// Welcome to AI Code Platform\n// Start coding with AI assistance\n\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1>Hello, World!</h1>\n      <p>Start building amazing applications with AI assistance.</p>\n    </div>\n  );\n}\n\nexport default App;`,\n      language: 'javascript',\n      lastModified: new Date()\n    }, {\n      id: '3',\n      name: 'index.js',\n      type: 'file',\n      path: '/src/index.js',\n      content: `import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);`,\n      language: 'javascript',\n      lastModified: new Date()\n    }]\n  }, {\n    id: '4',\n    name: 'package.json',\n    type: 'file',\n    path: '/package.json',\n    content: `{\n  \"name\": \"ai-code-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A project built with AI assistance\",\n  \"main\": \"src/index.js\",\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  }\n}`,\n    language: 'json',\n    lastModified: new Date()\n  }],\n  createdAt: new Date(),\n  updatedAt: new Date()\n};\nexport const useProjectStore = create()((set, get) => ({\n  currentProject: defaultProject,\n  projects: [defaultProject],\n  selectedFile: null,\n  isLoading: false,\n  createProject: (name, description) => {\n    const newProject = {\n      id: Date.now().toString(),\n      name,\n      description,\n      files: [],\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    set(state => ({\n      projects: [...state.projects, newProject],\n      currentProject: newProject,\n      selectedFile: null\n    }));\n  },\n  loadProject: projectId => {\n    const project = get().projects.find(p => p.id === projectId);\n    if (project) {\n      set({\n        currentProject: project,\n        selectedFile: null\n      });\n    }\n  },\n  saveProject: () => {\n    const {\n      currentProject\n    } = get();\n    if (!currentProject) return;\n    const updatedProject = {\n      ...currentProject,\n      updatedAt: new Date()\n    };\n    set(state => ({\n      currentProject: updatedProject,\n      projects: state.projects.map(p => p.id === updatedProject.id ? updatedProject : p)\n    }));\n  },\n  deleteProject: projectId => {\n    set(state => {\n      var _state$currentProject;\n      return {\n        projects: state.projects.filter(p => p.id !== projectId),\n        currentProject: ((_state$currentProject = state.currentProject) === null || _state$currentProject === void 0 ? void 0 : _state$currentProject.id) === projectId ? null : state.currentProject\n      };\n    });\n  },\n  selectFile: file => {\n    set({\n      selectedFile: file\n    });\n  },\n  createFile: (parentPath, name, type, content) => {\n    const {\n      currentProject\n    } = get();\n    if (!currentProject) return;\n    const newFile = {\n      id: Date.now().toString(),\n      name,\n      type,\n      path: `${parentPath}/${name}`,\n      content: type === 'file' ? content || '' : undefined,\n      language: type === 'file' ? 'javascript' : undefined,\n      lastModified: new Date()\n    };\n    const updateFiles = nodes => {\n      return nodes.map(node => {\n        if (node.path === parentPath) {\n          return {\n            ...node,\n            children: [...(node.children || []), newFile]\n          };\n        }\n        if (node.children) {\n          return {\n            ...node,\n            children: updateFiles(node.children)\n          };\n        }\n        return node;\n      });\n    };\n    const updatedFiles = updateFiles(currentProject.files);\n    set(state => ({\n      currentProject: {\n        ...state.currentProject,\n        files: updatedFiles,\n        updatedAt: new Date()\n      }\n    }));\n    get().saveProject();\n  },\n  updateFile: (filePath, content) => {\n    const {\n      currentProject\n    } = get();\n    if (!currentProject) return;\n    const updateFileContent = nodes => {\n      return nodes.map(node => {\n        if (node.path === filePath) {\n          return {\n            ...node,\n            content,\n            lastModified: new Date()\n          };\n        }\n        if (node.children) {\n          return {\n            ...node,\n            children: updateFileContent(node.children)\n          };\n        }\n        return node;\n      });\n    };\n    const updatedFiles = updateFileContent(currentProject.files);\n    set(state => {\n      var _state$selectedFile;\n      return {\n        currentProject: {\n          ...state.currentProject,\n          files: updatedFiles,\n          updatedAt: new Date()\n        },\n        selectedFile: ((_state$selectedFile = state.selectedFile) === null || _state$selectedFile === void 0 ? void 0 : _state$selectedFile.path) === filePath ? {\n          ...state.selectedFile,\n          content,\n          lastModified: new Date()\n        } : state.selectedFile\n      };\n    });\n    get().saveProject();\n  },\n  deleteFile: filePath => {\n    const {\n      currentProject\n    } = get();\n    if (!currentProject) return;\n    const updateFiles = nodes => {\n      return nodes.filter(node => {\n        if (node.path === filePath) {\n          return false;\n        }\n        if (node.children) {\n          node.children = updateFiles(node.children);\n        }\n        return true;\n      });\n    };\n    const updatedFiles = updateFiles(currentProject.files);\n    set(state => {\n      var _state$selectedFile2;\n      return {\n        currentProject: {\n          ...state.currentProject,\n          files: updatedFiles,\n          updatedAt: new Date()\n        },\n        selectedFile: ((_state$selectedFile2 = state.selectedFile) === null || _state$selectedFile2 === void 0 ? void 0 : _state$selectedFile2.path) === filePath ? null : state.selectedFile\n      };\n    });\n    get().saveProject();\n  },\n  renameFile: (filePath, newName) => {\n    const {\n      currentProject\n    } = get();\n    if (!currentProject) return;\n    const updateFiles = nodes => {\n      return nodes.map(node => {\n        if (node.path === filePath) {\n          const newPath = node.path.split('/').slice(0, -1).join('/') + '/' + newName;\n          return {\n            ...node,\n            name: newName,\n            path: newPath,\n            lastModified: new Date()\n          };\n        }\n        if (node.children) {\n          return {\n            ...node,\n            children: updateFiles(node.children)\n          };\n        }\n        return node;\n      });\n    };\n    const updatedFiles = updateFiles(currentProject.files);\n    set(state => {\n      var _state$selectedFile3;\n      return {\n        currentProject: {\n          ...state.currentProject,\n          files: updatedFiles,\n          updatedAt: new Date()\n        },\n        selectedFile: ((_state$selectedFile3 = state.selectedFile) === null || _state$selectedFile3 === void 0 ? void 0 : _state$selectedFile3.path) === filePath ? {\n          ...state.selectedFile,\n          name: newName,\n          lastModified: new Date()\n        } : state.selectedFile\n      };\n    });\n    get().saveProject();\n  },\n  moveFile: (filePath, newParentPath) => {\n    // TODO: Implement file moving functionality\n    console.log('Move file:', filePath, 'to:', newParentPath);\n  },\n  getFileByPath: path => {\n    const {\n      currentProject\n    } = get();\n    if (!currentProject) return null;\n    const findFile = nodes => {\n      for (const node of nodes) {\n        if (node.path === path) {\n          return node;\n        }\n        if (node.children) {\n          const found = findFile(node.children);\n          if (found) return found;\n        }\n      }\n      return null;\n    };\n    return findFile(currentProject.files);\n  },\n  getProjectStructure: () => {\n    const {\n      currentProject\n    } = get();\n    if (!currentProject) return '';\n    const formatStructure = (nodes, indent = '') => {\n      let result = '';\n      for (const node of nodes) {\n        result += `${indent}${node.type === 'folder' ? '📁' : '📄'} ${node.name}\\n`;\n        if (node.children) {\n          result += formatStructure(node.children, indent + '  ');\n        }\n      }\n      return result;\n    };\n    return formatStructure(currentProject.files);\n  },\n  exportProject: () => {\n    const {\n      currentProject\n    } = get();\n    if (!currentProject) return '';\n    return JSON.stringify(currentProject, null, 2);\n  },\n  importProject: projectData => {\n    try {\n      const project = JSON.parse(projectData);\n      project.id = Date.now().toString();\n      project.createdAt = new Date();\n      project.updatedAt = new Date();\n      set(state => ({\n        projects: [...state.projects, project],\n        currentProject: project,\n        selectedFile: null\n      }));\n    } catch (error) {\n      console.error('Failed to import project:', error);\n    }\n  }\n}));","map":{"version":3,"names":["create","defaultProject","id","name","description","files","type","path","children","content","language","lastModified","Date","createdAt","updatedAt","useProjectStore","set","get","currentProject","projects","selectedFile","isLoading","createProject","newProject","now","toString","state","loadProject","projectId","project","find","p","saveProject","updatedProject","map","deleteProject","_state$currentProject","filter","selectFile","file","createFile","parentPath","newFile","undefined","updateFiles","nodes","node","updatedFiles","updateFile","filePath","updateFileContent","_state$selectedFile","deleteFile","_state$selectedFile2","renameFile","newName","newPath","split","slice","join","_state$selectedFile3","moveFile","newParentPath","console","log","getFileByPath","findFile","found","getProjectStructure","formatStructure","indent","result","exportProject","JSON","stringify","importProject","projectData","parse","error"],"sources":["/Users/yaswanthkumary/Documents/AI-ML/Build apps/ai-code-platform/services/frontend/src/stores/projectStore.ts"],"sourcesContent":["import { create } from 'zustand';\n\nexport interface FileNode {\n  id: string;\n  name: string;\n  type: 'file' | 'folder';\n  path: string;\n  children?: FileNode[];\n  content?: string;\n  language?: string;\n  lastModified?: Date;\n}\n\nexport interface Project {\n  id: string;\n  name: string;\n  description?: string;\n  files: FileNode[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\ninterface ProjectState {\n  currentProject: Project | null;\n  projects: Project[];\n  selectedFile: FileNode | null;\n  isLoading: boolean;\n  \n  // Actions\n  createProject: (name: string, description?: string) => void;\n  loadProject: (projectId: string) => void;\n  saveProject: () => void;\n  deleteProject: (projectId: string) => void;\n  \n  // File operations\n  selectFile: (file: FileNode) => void;\n  createFile: (parentPath: string, name: string, type: 'file' | 'folder', content?: string) => void;\n  updateFile: (filePath: string, content: string) => void;\n  deleteFile: (filePath: string) => void;\n  renameFile: (filePath: string, newName: string) => void;\n  moveFile: (filePath: string, newParentPath: string) => void;\n  \n  // Utility functions\n  getFileByPath: (path: string) => FileNode | null;\n  getProjectStructure: () => string;\n  exportProject: () => string;\n  importProject: (projectData: string) => void;\n}\n\nconst defaultProject: Project = {\n  id: 'default',\n  name: 'My AI Project',\n  description: 'A project built with AI assistance',\n  files: [\n    {\n      id: '1',\n      name: 'src',\n      type: 'folder',\n      path: '/src',\n      children: [\n        {\n          id: '2',\n          name: 'App.js',\n          type: 'file',\n          path: '/src/App.js',\n          content: `// Welcome to AI Code Platform\n// Start coding with AI assistance\n\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1>Hello, World!</h1>\n      <p>Start building amazing applications with AI assistance.</p>\n    </div>\n  );\n}\n\nexport default App;`,\n          language: 'javascript',\n          lastModified: new Date(),\n        },\n        {\n          id: '3',\n          name: 'index.js',\n          type: 'file',\n          path: '/src/index.js',\n          content: `import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);`,\n          language: 'javascript',\n          lastModified: new Date(),\n        },\n      ],\n    },\n    {\n      id: '4',\n      name: 'package.json',\n      type: 'file',\n      path: '/package.json',\n      content: `{\n  \"name\": \"ai-code-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A project built with AI assistance\",\n  \"main\": \"src/index.js\",\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  }\n}`,\n      language: 'json',\n      lastModified: new Date(),\n    },\n  ],\n  createdAt: new Date(),\n  updatedAt: new Date(),\n};\n\nexport const useProjectStore = create<ProjectState>()((set, get) => ({\n      currentProject: defaultProject,\n      projects: [defaultProject],\n      selectedFile: null,\n      isLoading: false,\n\n      createProject: (name: string, description?: string) => {\n        const newProject: Project = {\n          id: Date.now().toString(),\n          name,\n          description,\n          files: [],\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        };\n\n        set((state) => ({\n          projects: [...state.projects, newProject],\n          currentProject: newProject,\n          selectedFile: null,\n        }));\n      },\n\n      loadProject: (projectId: string) => {\n        const project = get().projects.find(p => p.id === projectId);\n        if (project) {\n          set({\n            currentProject: project,\n            selectedFile: null,\n          });\n        }\n      },\n\n      saveProject: () => {\n        const { currentProject } = get();\n        if (!currentProject) return;\n\n        const updatedProject = {\n          ...currentProject,\n          updatedAt: new Date(),\n        };\n\n        set((state) => ({\n          currentProject: updatedProject,\n          projects: state.projects.map(p => \n            p.id === updatedProject.id ? updatedProject : p\n          ),\n        }));\n      },\n\n      deleteProject: (projectId: string) => {\n        set((state) => ({\n          projects: state.projects.filter(p => p.id !== projectId),\n          currentProject: state.currentProject?.id === projectId ? null : state.currentProject,\n        }));\n      },\n\n      selectFile: (file: FileNode) => {\n        set({ selectedFile: file });\n      },\n\n      createFile: (parentPath: string, name: string, type: 'file' | 'folder', content?: string) => {\n        const { currentProject } = get();\n        if (!currentProject) return;\n\n        const newFile: FileNode = {\n          id: Date.now().toString(),\n          name,\n          type,\n          path: `${parentPath}/${name}`,\n          content: type === 'file' ? (content || '') : undefined,\n          language: type === 'file' ? 'javascript' : undefined,\n          lastModified: new Date(),\n        };\n\n        const updateFiles = (nodes: FileNode[]): FileNode[] => {\n          return nodes.map(node => {\n            if (node.path === parentPath) {\n              return {\n                ...node,\n                children: [...(node.children || []), newFile],\n              };\n            }\n            if (node.children) {\n              return {\n                ...node,\n                children: updateFiles(node.children),\n              };\n            }\n            return node;\n          });\n        };\n\n        const updatedFiles = updateFiles(currentProject.files);\n\n        set((state) => ({\n          currentProject: {\n            ...state.currentProject!,\n            files: updatedFiles,\n            updatedAt: new Date(),\n          },\n        }));\n\n        get().saveProject();\n      },\n\n      updateFile: (filePath: string, content: string) => {\n        const { currentProject } = get();\n        if (!currentProject) return;\n\n        const updateFileContent = (nodes: FileNode[]): FileNode[] => {\n          return nodes.map(node => {\n            if (node.path === filePath) {\n              return { \n                ...node, \n                content,\n                lastModified: new Date(),\n              };\n            }\n            if (node.children) {\n              return {\n                ...node,\n                children: updateFileContent(node.children),\n              };\n            }\n            return node;\n          });\n        };\n\n        const updatedFiles = updateFileContent(currentProject.files);\n\n        set((state) => ({\n          currentProject: {\n            ...state.currentProject!,\n            files: updatedFiles,\n            updatedAt: new Date(),\n          },\n          selectedFile: state.selectedFile?.path === filePath \n            ? { ...state.selectedFile, content, lastModified: new Date() }\n            : state.selectedFile,\n        }));\n\n        get().saveProject();\n      },\n\n      deleteFile: (filePath: string) => {\n        const { currentProject } = get();\n        if (!currentProject) return;\n\n        const updateFiles = (nodes: FileNode[]): FileNode[] => {\n          return nodes.filter(node => {\n            if (node.path === filePath) {\n              return false;\n            }\n            if (node.children) {\n              node.children = updateFiles(node.children);\n            }\n            return true;\n          });\n        };\n\n        const updatedFiles = updateFiles(currentProject.files);\n\n        set((state) => ({\n          currentProject: {\n            ...state.currentProject!,\n            files: updatedFiles,\n            updatedAt: new Date(),\n          },\n          selectedFile: state.selectedFile?.path === filePath ? null : state.selectedFile,\n        }));\n\n        get().saveProject();\n      },\n\n      renameFile: (filePath: string, newName: string) => {\n        const { currentProject } = get();\n        if (!currentProject) return;\n\n        const updateFiles = (nodes: FileNode[]): FileNode[] => {\n          return nodes.map(node => {\n            if (node.path === filePath) {\n              const newPath = node.path.split('/').slice(0, -1).join('/') + '/' + newName;\n              return {\n                ...node,\n                name: newName,\n                path: newPath,\n                lastModified: new Date(),\n              };\n            }\n            if (node.children) {\n              return {\n                ...node,\n                children: updateFiles(node.children),\n              };\n            }\n            return node;\n          });\n        };\n\n        const updatedFiles = updateFiles(currentProject.files);\n\n        set((state) => ({\n          currentProject: {\n            ...state.currentProject!,\n            files: updatedFiles,\n            updatedAt: new Date(),\n          },\n          selectedFile: state.selectedFile?.path === filePath \n            ? { ...state.selectedFile, name: newName, lastModified: new Date() }\n            : state.selectedFile,\n        }));\n\n        get().saveProject();\n      },\n\n      moveFile: (filePath: string, newParentPath: string) => {\n        // TODO: Implement file moving functionality\n        console.log('Move file:', filePath, 'to:', newParentPath);\n      },\n\n      getFileByPath: (path: string): FileNode | null => {\n        const { currentProject } = get();\n        if (!currentProject) return null;\n\n        const findFile = (nodes: FileNode[]): FileNode | null => {\n          for (const node of nodes) {\n            if (node.path === path) {\n              return node;\n            }\n            if (node.children) {\n              const found = findFile(node.children);\n              if (found) return found;\n            }\n          }\n          return null;\n        };\n\n        return findFile(currentProject.files);\n      },\n\n      getProjectStructure: (): string => {\n        const { currentProject } = get();\n        if (!currentProject) return '';\n\n        const formatStructure = (nodes: FileNode[], indent: string = ''): string => {\n          let result = '';\n          for (const node of nodes) {\n            result += `${indent}${node.type === 'folder' ? '📁' : '📄'} ${node.name}\\n`;\n            if (node.children) {\n              result += formatStructure(node.children, indent + '  ');\n            }\n          }\n          return result;\n        };\n\n        return formatStructure(currentProject.files);\n      },\n\n      exportProject: (): string => {\n        const { currentProject } = get();\n        if (!currentProject) return '';\n\n        return JSON.stringify(currentProject, null, 2);\n      },\n\n      importProject: (projectData: string) => {\n        try {\n          const project: Project = JSON.parse(projectData);\n          project.id = Date.now().toString();\n          project.createdAt = new Date();\n          project.updatedAt = new Date();\n\n          set((state) => ({\n            projects: [...state.projects, project],\n            currentProject: project,\n            selectedFile: null,\n          }));\n        } catch (error) {\n          console.error('Failed to import project:', error);\n        }\n      },\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}